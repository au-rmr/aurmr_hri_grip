import rospy
import actionlib
import sys

from control_msgs.msg import FollowJointTrajectoryAction
from control_msgs.msg import FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from geometry_msgs.msg import Twist

def main():
    rospy.init_node("command_velocity")

    publisher = rospy.Publisher('/stretch/cmd_vel', Twist, queue_size=1)
    # server_reached = client.wait_for_server(timeout=rospy.Duration(60.0))
    # if not server_reached:
    #     print("cannot connect to cmd_vel")
    #     sys.exit()

    twist = {
        'linear': {
            'x': -0.08091569523248175,
            'y': 0.0,
            'z': 0.0
        },
        'angular': {
            'x': 0.0,
            'y': 0.0,
            'z': 0.0
        }
    }

    twist = Twist()
    # twist.header.stamp = rospy.Time.now()
    twist.linear.x = 0.08091569523248175
    twist.linear.y = 0.0
    twist.linear.z = 0.0
    twist.angular.x = 0.0
    twist.angular.y = 0.0
    twist.angular.z = 0.0
    print(twist)

    # joint_names = [key for key in pose]
    # point = JointTrajectoryPoint()
    # point.time_from_start = rospy.Duration(0.5)

    # trajectory_goal = FollowJointTrajectoryGoal()
    # trajectory_goal.goal_time_tolerance = rospy.Time(1.0)
    # trajectory_goal.trajectory.joint_names = joint_names
    # if not custom_contact_thresholds: 
    #     joint_positions = [pose[key] for key in joint_names]
    #     point.positions = joint_positions
    #     trajectory_goal.trajectory.points = [point]
    # else:
    #     pose_correct = all([len(pose[key])==2 for key in joint_names])
    #     if not pose_correct:
    #         rospy.logerr("HelloNode.move_to_pose: Not sending trajectory due to improper pose. custom_contact_thresholds requires 2 values (pose_target, contact_threshold_effort) for each joint name, but pose = {0}".format(pose))
    #         return
    #     joint_positions = [pose[key][0] for key in joint_names]
    #     joint_efforts = [pose[key][1] for key in joint_names]
    #     point.positions = joint_positions
    #     point.effort = joint_efforts
    #     trajectory_goal.trajectory.points = [point]
    # trajectory_goal.trajectory.header.stamp = rospy.Time.now()
    publisher.publish(twist)

    import pdb; pdb.set_trace()

    print('done')
    # client.wait_for_result()


    rospy.spin()
    # marker_publisher = rospy.Publisher("visualization_marker", Marker, queue_size=1)

    # # Build a PinholeCameraModel from a CameraInfo message
    # camera_info = rospy.wait_for_message("/gripper_camera/camera_info", CameraInfo)
    # camera_model = image_geometry.PinholeCameraModel()
    # camera_model.fromCameraInfo(camera_info)

    # print(f"{camera_info.width} {camera_info.height}")

    # # Project pixel to ray and normalize ray
    # ray = camera_model.projectPixelTo3dRay((camera_info.width/2,camera_info.height/2))
    # ray = [x/ray[2] for x in ray]

    # # Our first point will be at the origin
    # p1 = Point()
    # p1.x = 0
    # p1.y = 0
    # p1.z = 0

    # # The second point will be along our ray, 5 units out.
    # p2 = Point()
    # distance = 1
    # p2.x = ray[0] * distance
    # p2.y = ray[1] * distance
    # p2.z = ray[2] * distance

    # # Build a Marker message for rviz
    # marker = Marker()
    # marker.header.frame_id = camera_model.tfFrame()
    # marker.header.stamp = rospy.rostime.Time.now()
    # marker.ns = "basic_shapes"
    # marker.id = 0
    # marker.type = Marker.ARROW
    # # marker.type = Marker.SPHERE
    # marker.action = Marker.ADD
    # marker.points = [p1, p2]

    # marker.scale.x = 0.01
    # marker.scale.y = 0.01
    # marker.scale.z = 0.04

    # # marker.pose.orientation.x = 0.0
    # # marker.pose.orientation.y = 0.0
    # # marker.pose.orientation.z = 0.0
    # # marker.pose.orientation.w = 1.0

    # marker.color.r = 1.0
    # marker.color.g = 0.0
    # marker.color.b = 0.0
    # marker.color.a = 1.0


    # marker.lifetime = rospy.rostime.Duration()
    # marker_publisher.publish(marker)

    # print(f"Marker published at {ray} in {camera_model.tfFrame()}")
    
    # r = rospy.Rate(10) # 10hz
    # while not rospy.is_shutdown():
    #     marker_publisher.publish(marker)
    #     r.sleep()

if __name__ == '__main__':
    main()